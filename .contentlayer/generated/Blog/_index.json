[
  {
    "title": "Emojis!",
    "publishedAt": "2021-10-17",
    "summary": "Emojis everywhere.",
    "body": {
      "raw": "\nHello...\n\nLet's look at two apostrophe's \\[sic\\].\n\n\"'Let's try \"nested\" quotes,' he said.\"\n\nLet's look at three apostrophes: won't, shouldn't.\n\nA double quote---\"within\" dashes---would be nice.\n\nA double quote---\"within dashes\"---would be nice.\n\nI haven't tried (\"parentheses\" yet).\n\nI haven't tried (\"parentheses\") yet.\n\nWhat about \"(parentheses)\"?.\n\nAnd \"\\[brackets\\]\"?.\n\nI haven't tried [\"brackets\" yet].\n\nI haven't tried \\[\"brackets\"\\] yet.\n\nWhat about slashes/'virgules'?\n\nWhat about slashes/\"virgules\"?\n\nAnd \\{'curly' braces\\}?\n\nAnd \\{\"curly\" braces\\}?\n\n\"'Twas the night before Christmas…\" with a straight apostrophe---should not fail.\n\n\"’Twas the night before Christmas…\" with an explicit curly apostrophe.\n\nHey, auto generated content.\n\nThumbs up: :+1:, thumbs down: :-1:.\n\nFamilies: :family_man_man_boy_boy:\n\nLong flags: :wales:, :scotland:, :england:.\n\n---\n\n**Advertisement :)**\n\n- **[pica](https://nodeca.github.io/pica/demo/)** - high quality and fast image\n  resize in browser.\n- **[babelfish](https://github.com/nodeca/babelfish/)** - developer friendly\n  i18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n\n## h2 Heading\n\n### h3 Heading\n\n#### h4 Heading\n\n##### h5 Heading\n\n###### h6 Heading\n\n## Horizontal Rules\n\n---\n\n---\n\n---\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\ntest. . . .\n\ntest . . .\n\nwhy is this . . . even working . . . ?\n\nHey, 6'2\" tall.\n\n!!!!!! ???? ,, -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n## Emphasis\n\n**This is bold text**\n\n**This is bold text**\n\n_This is italic text_\n\n_This is italic text_\n\n~~Strikethrough~~\n\n## Blockquotes\n\n> Blockquotes can also be nested...\n>\n> > ...by using additional greater-than signs right next to each other...\n> >\n> > > ...or with spaces between arrows.\n\n## Lists\n\nUnordered\n\n- Create a list by starting a line with `+`, `-`, or `*`\n- Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    - Ac tristique libero volutpat at\n    * Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n- Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n4. You can use sequential numbers...\n5. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\nBlock code \"fences\"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n```js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |\n\nRight aligned columns\n\n| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ 'title text!')\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg 'The Stormtroopocat')\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg 'The Dojocat'\n\n## Plugins\n\nThe killer feature of `markdown-it` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19[^th^]\n- H~2~O\n\n### [\\<ins\\>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n### [\\<mark\\>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n: Definition 1\nwith lazy continuation.\n\nTerm 2 with _inline markup_\n\n: Definition 2\n\n_Compact style:_\n\nTerm 1\n~ Definition 1\n\nTerm 2\n~ Definition 2a\n~ Definition 2b\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n\\*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n_here be dragons_\n:::",
      "html": "<p>Hello...</p>\n<p>Let's look at two apostrophe's [sic].</p>\n<p>\"'Let's try \"nested\" quotes,' he said.\"</p>\n<p>Let's look at three apostrophes: won't, shouldn't.</p>\n<p>A double quote---\"within\" dashes---would be nice.</p>\n<p>A double quote---\"within dashes\"---would be nice.</p>\n<p>I haven't tried (\"parentheses\" yet).</p>\n<p>I haven't tried (\"parentheses\") yet.</p>\n<p>What about \"(parentheses)\"?.</p>\n<p>And \"[brackets]\"?.</p>\n<p>I haven't tried [\"brackets\" yet].</p>\n<p>I haven't tried [\"brackets\"] yet.</p>\n<p>What about slashes/'virgules'?</p>\n<p>What about slashes/\"virgules\"?</p>\n<p>And {'curly' braces}?</p>\n<p>And {\"curly\" braces}?</p>\n<p>\"'Twas the night before Christmas…\" with a straight apostrophe---should not fail.</p>\n<p>\"’Twas the night before Christmas…\" with an explicit curly apostrophe.</p>\n<p>Hey, auto generated content.</p>\n<p>Thumbs up: :+1:, thumbs down: :-1:.</p>\n<p>Families: :family_man_man_boy_boy:</p>\n<p>Long flags: :wales:, :scotland:, :england:.</p>\n<hr>\n<p><strong>Advertisement :)</strong></p>\n<ul>\n<li><strong><a href=\"https://nodeca.github.io/pica/demo/\">pica</a></strong> - high quality and fast image\nresize in browser.</li>\n<li><strong><a href=\"https://github.com/nodeca/babelfish/\">babelfish</a></strong> - developer friendly\ni18n with plurals support and easy syntax.</li>\n</ul>\n<p>You will like those projects!</p>\n<hr>\n<h1>h1 Heading 8-)</h1>\n<h2>h2 Heading</h2>\n<h3>h3 Heading</h3>\n<h4>h4 Heading</h4>\n<h5>h5 Heading</h5>\n<h6>h6 Heading</h6>\n<h2>Horizontal Rules</h2>\n<hr>\n<hr>\n<hr>\n<h2>Typographic replacements</h2>\n<p>Enable typographer option to see result.</p>\n<p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>\n<p>test.. test... test..... test?..... test!....</p>\n<p>test. . . .</p>\n<p>test . . .</p>\n<p>why is this . . . even working . . . ?</p>\n<p>Hey, 6'2\" tall.</p>\n<p>!!!!!! ???? ,, -- ---</p>\n<p>\"Smartypants, double quotes\" and 'single quotes'</p>\n<h2>Emphasis</h2>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is bold text</strong></p>\n<p><em>This is italic text</em></p>\n<p><em>This is italic text</em></p>\n<p>~~Strikethrough~~</p>\n<h2>Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested...</p>\n<blockquote>\n<p>...by using additional greater-than signs right next to each other...</p>\n<blockquote>\n<p>...or with spaces between arrows.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2>Lists</h2>\n<p>Unordered</p>\n<ul>\n<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>\n<li>Sub-lists are made by indenting 2 spaces:\n<ul>\n<li>Marker character change forces new list start:\n<ul>\n<li>Ac tristique libero volutpat at</li>\n</ul>\n<ul>\n<li>Facilisis in pretium nisl aliquet</li>\n</ul>\n<ul>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Very easy!</li>\n</ul>\n<p>Ordered</p>\n<ol>\n<li>\n<p>Lorem ipsum dolor sit amet</p>\n</li>\n<li>\n<p>Consectetur adipiscing elit</p>\n</li>\n<li>\n<p>Integer molestie lorem at massa</p>\n</li>\n<li>\n<p>You can use sequential numbers...</p>\n</li>\n<li>\n<p>...or keep all the numbers as <code>1.</code></p>\n</li>\n</ol>\n<p>Start numbering with offset:</p>\n<ol start=\"57\">\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h2>Code</h2>\n<p>Inline <code>code</code></p>\n<p>Indented code</p>\n<pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre>\n<p>Block code \"fences\"</p>\n<pre><code>Sample text here...\n</code></pre>\n<p>Syntax highlighting</p>\n<pre><code class=\"language-js\">var foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n</code></pre>\n<h2>Tables</h2>\n<p>| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |</p>\n<p>Right aligned columns</p>\n<p>| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |</p>\n<h2>Links</h2>\n<p><a href=\"http://dev.nodeca.com\">link text</a></p>\n<p><a href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title</a></p>\n<p>Autoconverted link https://github.com/nodeca/pica (enable linkify to see)</p>\n<h2>Images</h2>\n<p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n<img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"></p>\n<p>Like links, Images also have a footnote style syntax</p>\n<p><img src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\"></p>\n<p>With a reference later in the document defining the URL location:</p>\n<h2>Plugins</h2>\n<p>The killer feature of <code>markdown-it</code> is very effective support of\n<a href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins</a>.</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies</a></h3>\n<blockquote>\n<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>\n<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>\n</blockquote>\n<p>see <a href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output</a> with twemoji.</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript</a> / <a href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript</a></h3>\n<ul>\n<li>19[^th^]</li>\n<li>H~2~O</li>\n</ul>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-ins\">&#x3C;ins></a></h3>\n<p>++Inserted text++</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-mark\">&#x3C;mark></a></h3>\n<p>==Marked text==</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes</a></h3>\n<p>Footnote 1 link[^first].</p>\n<p>Footnote 2 link[^second].</p>\n<p>Inline footnote^[Text of inline footnote] definition.</p>\n<p>Duplicated footnote reference[^second].</p>\n<p>[^first]: Footnote <strong>can have markup</strong></p>\n<pre><code>and multiple paragraphs.\n</code></pre>\n<p>[^second]: Footnote text.</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists</a></h3>\n<p>Term 1</p>\n<p>: Definition 1\nwith lazy continuation.</p>\n<p>Term 2 with <em>inline markup</em></p>\n<p>: Definition 2</p>\n<p><em>Compact style:</em></p>\n<p>Term 1\n~ Definition 1</p>\n<p>Term 2\n~ Definition 2a\n~ Definition 2b</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations</a></h3>\n<p>This is HTML abbreviation example.</p>\n<p>It converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.</p>\n<p>*[HTML]: Hyper Text Markup Language</p>\n<h3><a href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers</a></h3>\n<p>::: warning\n<em>here be dragons</em>\n:::</p>"
    },
    "_id": "posts/emojis.mdx",
    "_raw": {
      "sourceFilePath": "posts/emojis.mdx",
      "sourceFileName": "emojis.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/emojis"
    },
    "type": "Blog",
    "readingTime": {
      "text": "3 min read",
      "minutes": 2.610909090909091,
      "time": 156655,
      "words": 718
    },
    "wordCount": 719,
    "tweetIds": [],
    "slug": "emojis"
  },
  {
    "title": "How to Use Twemojis Within the Unified Ecosystem",
    "publishedAt": "2021-10-18",
    "summary": "We'll talk about what rehype-twemojify is, why it was made, and how to actually use it in a project.",
    "body": {
      "raw": "\n# Introduction\n\nHi! In this article, I'll talk about how to add twemojis to [rehype.js](https://github.com/rehypejs/rehype).\n\nSince emojis had first got into the web, they always took people's attention, as they were a totally new language.\nEveryone loves emojis, right? Me too. I personally consider myself an emoji enthusiast.\nI use emojis all the time, and undoubtfully, [Emojipedia](https://emojipedia.com) is my best friend.\n\nHowever, since emojis are system-dependent, some emojis that look pretty in your environment might just show nothing at all for other environments.\nHow to solve this problem? Well, we have custom emojis! Custom emojis are emojis that are displayed as images instead of ordinary plain text.\nBy using custom emojis, we, as developers, can equally provide a consistent user experience for everyone. Hooray!\nNevertheless, there are plentiful number of custom emojis to choose from.\nMicrosoft's Segoe UI Emoji is also good, but since it has a strict license, it's actually quite not... good.\nBut hey, [twemoji](https://twemoji.twitter.com/) to the rescue! It's totally free, open sourced, and more importantly, pretty!\nI'm using it on my website, too! ⚡⚡\n\n...\n\nOkay, how do we apply Twemojis to rehype?\n\n# Installation\n\nFirst, let's talk about how to convert ordinary emojis to twemojis.\nPreviously, there were no plugins to convert ordinary emojis to twemojis, but don't be sad, I made one!\nYou can install the [rehype-twemojify](https://www.npmjs.com/package/rehype-twemojify) plugin with `yarn`, `npm`, `pnpm` or whatever package manager you prefer.\nI'll do it with yarn, (not yarn v2, but yarn classic) since yarn is fast and lightweight.\n\n```\nyarn add --dev rehype-twemojify // For yarn\n```\n\n```\nnpm i --save-dev rehype-twemojify // For NPM\n```\n\nNow that you've installed it, try adding it to your rehype plugin list.\nIf you don't have rehype yet, install it using this command:\n\n```\nyarn add --dev rehype // For Yarn\n```\n\n```\nnpm i --save-dev rehype // For NPM\n```\n\nAnd simply run this plugin as follows.\n\n# Configurations\n\n```ts\nimport rehype from 'rehype';\nimport rehypeTwemojify from 'rehype-twemojify';\n\nrehype().use(rehypeTwemojify);\n```\n\nOr, for [contentlayer](https://www.contentlayer.dev/), you could do this:\n\n```ts:contentlayer.config.ts\nimport rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [[rehypeTwemojify]]\n  }\n});\n\nexport default contentLayerConfig;\n```\n\nFor most people, this should be enough. But if you're an I-wanna-customize-more sort of person, this is for you.\n\n# Next.js Specific Config\n\nIf you're using Next.js, here's a custom configuration, which supports using `/_next/image`, instead of the default one.\n\nJust add `framework: 'next'`, and boom!\n\nIf you want to use your own twemoji files, add your custom base, which can be configured using `base: '/YOUR/BASE'`.\nBy default, if your files are located at `/public/static/images/twemoji`, you should write `/static/images/twemoji`.\n\nFurthermore, you can set your images' width and quality via the `w` and `q` parameters in the `params` object.\n`params.w` is the width, and you can read more about it [here](https://github.com/vercel/next.js/issues/18413).\n`params.q` is the quality of the image, and usually for emojis that use small images, `5` to `40` is okay.\nIt should be fine even if you set it to `1`.\n\nActually, you can add more parameters if you want. Internally, it works by appending those parameters to the image query url.\n\nYou can also exclude some characters you don't want to transform, such as the `©` character, by setting the `exclude` array.\n\nAnyway, this is the config for Next.js.\n\n```ts:contentlayer.config.ts\nimport rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypeTwemojify,\n        {\n          framework: 'next',\n          params: { w: 32, q: 20 },\n          base: '/static/images/twemoji',\n          exclude: ['©', '®', '™', '℗']\n        }\n      ]\n    ]\n  }\n});\n\nexport default contentLayerConfig;\n```\n\n# Configurations\n\nIf you're curious what configurations you can do, here's the list.\n\n- `framework`: `'next' | 'aleph'`, optional. Choose the framework you want to use.\n- `params`: `{[key: string]: any}`, optional. Any params you want to put for the image url.\n- `folder`: `string`, optional. The folder that has emojis, e.g., `svg`, `72x72`.\n- `base`: `string`, optional. The base url, by default `https://twemoji.maxcdn.com/v/latest`\n- `ext`: `string`, optional. The image extension, by default `.png`\n- `size`: `string`, optional. The assets size, by default `72x72`\n- `exclude`: `Array<string>`, optional. Characters you want to exclude.\n\nThanks for reading, as always! Goodbye. 🛸\n",
      "html": "<h1>Introduction</h1>\n<p>Hi! In this article, I'll talk about how to add twemojis to <a href=\"https://github.com/rehypejs/rehype\">rehype.js</a>.</p>\n<p>Since emojis had first got into the web, they always took people's attention, as they were a totally new language.\nEveryone loves emojis, right? Me too. I personally consider myself an emoji enthusiast.\nI use emojis all the time, and undoubtfully, <a href=\"https://emojipedia.com\">Emojipedia</a> is my best friend.</p>\n<p>However, since emojis are system-dependent, some emojis that look pretty in your environment might just show nothing at all for other environments.\nHow to solve this problem? Well, we have custom emojis! Custom emojis are emojis that are displayed as images instead of ordinary plain text.\nBy using custom emojis, we, as developers, can equally provide a consistent user experience for everyone. Hooray!\nNevertheless, there are plentiful number of custom emojis to choose from.\nMicrosoft's Segoe UI Emoji is also good, but since it has a strict license, it's actually quite not... good.\nBut hey, <a href=\"https://twemoji.twitter.com/\">twemoji</a> to the rescue! It's totally free, open sourced, and more importantly, pretty!\nI'm using it on my website, too! ⚡⚡</p>\n<p>...</p>\n<p>Okay, how do we apply Twemojis to rehype?</p>\n<h1>Installation</h1>\n<p>First, let's talk about how to convert ordinary emojis to twemojis.\nPreviously, there were no plugins to convert ordinary emojis to twemojis, but don't be sad, I made one!\nYou can install the <a href=\"https://www.npmjs.com/package/rehype-twemojify\">rehype-twemojify</a> plugin with <code>yarn</code>, <code>npm</code>, <code>pnpm</code> or whatever package manager you prefer.\nI'll do it with yarn, (not yarn v2, but yarn classic) since yarn is fast and lightweight.</p>\n<pre><code>yarn add --dev rehype-twemojify // For yarn\n</code></pre>\n<pre><code>npm i --save-dev rehype-twemojify // For NPM\n</code></pre>\n<p>Now that you've installed it, try adding it to your rehype plugin list.\nIf you don't have rehype yet, install it using this command:</p>\n<pre><code>yarn add --dev rehype // For Yarn\n</code></pre>\n<pre><code>npm i --save-dev rehype // For NPM\n</code></pre>\n<p>And simply run this plugin as follows.</p>\n<h1>Configurations</h1>\n<pre><code class=\"language-ts\">import rehype from 'rehype';\nimport rehypeTwemojify from 'rehype-twemojify';\n\nrehype().use(rehypeTwemojify);\n</code></pre>\n<p>Or, for <a href=\"https://www.contentlayer.dev/\">contentlayer</a>, you could do this:</p>\n<pre><code class=\"language-ts:contentlayer.config.ts\">import rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [[rehypeTwemojify]]\n  }\n});\n\nexport default contentLayerConfig;\n</code></pre>\n<p>For most people, this should be enough. But if you're an I-wanna-customize-more sort of person, this is for you.</p>\n<h1>Next.js Specific Config</h1>\n<p>If you're using Next.js, here's a custom configuration, which supports using <code>/_next/image</code>, instead of the default one.</p>\n<p>Just add <code>framework: 'next'</code>, and boom!</p>\n<p>If you want to use your own twemoji files, add your custom base, which can be configured using <code>base: '/YOUR/BASE'</code>.\nBy default, if your files are located at <code>/public/static/images/twemoji</code>, you should write <code>/static/images/twemoji</code>.</p>\n<p>Furthermore, you can set your images' width and quality via the <code>w</code> and <code>q</code> parameters in the <code>params</code> object.\n<code>params.w</code> is the width, and you can read more about it <a href=\"https://github.com/vercel/next.js/issues/18413\">here</a>.\n<code>params.q</code> is the quality of the image, and usually for emojis that use small images, <code>5</code> to <code>40</code> is okay.\nIt should be fine even if you set it to <code>1</code>.</p>\n<p>Actually, you can add more parameters if you want. Internally, it works by appending those parameters to the image query url.</p>\n<p>You can also exclude some characters you don't want to transform, such as the <code>©</code> character, by setting the <code>exclude</code> array.</p>\n<p>Anyway, this is the config for Next.js.</p>\n<pre><code class=\"language-ts:contentlayer.config.ts\">import rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypeTwemojify,\n        {\n          framework: 'next',\n          params: { w: 32, q: 20 },\n          base: '/static/images/twemoji',\n          exclude: ['©', '®', '™', '℗']\n        }\n      ]\n    ]\n  }\n});\n\nexport default contentLayerConfig;\n</code></pre>\n<h1>Configurations</h1>\n<p>If you're curious what configurations you can do, here's the list.</p>\n<ul>\n<li><code>framework</code>: <code>'next' | 'aleph'</code>, optional. Choose the framework you want to use.</li>\n<li><code>params</code>: <code>{[key: string]: any}</code>, optional. Any params you want to put for the image url.</li>\n<li><code>folder</code>: <code>string</code>, optional. The folder that has emojis, e.g., <code>svg</code>, <code>72x72</code>.</li>\n<li><code>base</code>: <code>string</code>, optional. The base url, by default <code>https://twemoji.maxcdn.com/v/latest</code></li>\n<li><code>ext</code>: <code>string</code>, optional. The image extension, by default <code>.png</code></li>\n<li><code>size</code>: <code>string</code>, optional. The assets size, by default <code>72x72</code></li>\n<li><code>exclude</code>: <code>Array&#x3C;string></code>, optional. Characters you want to exclude.</li>\n</ul>\n<p>Thanks for reading, as always! Goodbye. 🛸</p>"
    },
    "_id": "posts/integrating-twemoji-with-rehype.mdx",
    "_raw": {
      "sourceFilePath": "posts/integrating-twemoji-with-rehype.mdx",
      "sourceFileName": "integrating-twemoji-with-rehype.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/integrating-twemoji-with-rehype"
    },
    "type": "Blog",
    "readingTime": {
      "text": "3 min read",
      "minutes": 2.498181818181818,
      "time": 149891,
      "words": 687
    },
    "wordCount": 689,
    "tweetIds": [],
    "slug": "integrating-twemoji-with-rehype"
  },
  {
    "title": "MongoDB Tips & Tricks",
    "publishedAt": "2022-05-21",
    "summary": "What I Learned From Refactoring Sevenwiki.",
    "body": {
      "raw": "\n# MongoDB apparently can't handle Humongous data due to its design.\n\nMongoDB. We all know, we all praise. NoSQL! How wonderful is it?\n\nBut, when you start to dive deep in into the complexities of it,\nit sort of feels like... lost.\n\nWe, or at least I thought it was such a wonderful database,\nfast, scalable, and developer-friendly. (Well, you might think it still is.)\nBut it wasn't all sunshines and rainbows :/\nI had quite a lot of nit-picky skills to learn by trial-and-error.\n\nSo this post is about the common pitfalls you would want to avoid while using MongoDB.\n\nFirst, we'll talk about something a bit more shallow: arrays.\n\n# Arrays\n\n> A backend developer crying out while he first meets MongoDB:\n> **Hooray! No more crappy tables and relations and joins and all that s\\*\\*\\*!**\n\n> The day after service launch:\n> `mongodb: maximum file size exceeded.`\n\nWith MongoDB, people started throwing out a bunch of array-focused models.\nWell, It's easier for the devs to code!\n\nBut MongoDB uses BSON.\nBSON can only store 16MB.\nIf it exceeds 16MB, which quite commonly occurs for history files,\nlog files, and the like, it spits out an error.\n\nWhat happens next?\n\nUser input gets ignored, services malfunction,\nservers crash (when even errors aren't properly handled), and BOOM!\n\nSo how can we fix this....\n\n## The easier way (with caveats)\n\nThe lazy developer might say, why don't we just extend the maximum limit from,\nsay, 16MB to 64MB?\n\nAnd, it would **work**, thanks to the MongoDB devs who created GridFS.\n\nHappily ever after.\n\n## The harder way (that pays you back)\n\nA more sophisticated developer would try to refactor the models.\n\nShe would separate arrays, make an array element into a separate model,\nthose models would reference back the original document,\nby something like `'parent_id': 'some_random_ObjectId'`.\n\nThat would allow the developer to query elements of that new model\nand retrieve only elements that have the `parent_id` to something.\n\nThis achieves the same functionality with, well, not exceeding the limit.\n\nSince each element is stored in a separate document, it should still have plenty of capacity left.\n\nThe drawback of this approach is, I guess, a subtle increase in time complexity (or MongoDB might optimize the call and make it even faster)?\n\n# To Be Continued...\n",
      "html": "<h1>MongoDB apparently can't handle Humongous data due to its design.</h1>\n<p>MongoDB. We all know, we all praise. NoSQL! How wonderful is it?</p>\n<p>But, when you start to dive deep in into the complexities of it,\nit sort of feels like... lost.</p>\n<p>We, or at least I thought it was such a wonderful database,\nfast, scalable, and developer-friendly. (Well, you might think it still is.)\nBut it wasn't all sunshines and rainbows :/\nI had quite a lot of nit-picky skills to learn by trial-and-error.</p>\n<p>So this post is about the common pitfalls you would want to avoid while using MongoDB.</p>\n<p>First, we'll talk about something a bit more shallow: arrays.</p>\n<h1>Arrays</h1>\n<blockquote>\n<p>A backend developer crying out while he first meets MongoDB:\n<strong>Hooray! No more crappy tables and relations and joins and all that s***!</strong></p>\n</blockquote>\n<blockquote>\n<p>The day after service launch:\n<code>mongodb: maximum file size exceeded.</code></p>\n</blockquote>\n<p>With MongoDB, people started throwing out a bunch of array-focused models.\nWell, It's easier for the devs to code!</p>\n<p>But MongoDB uses BSON.\nBSON can only store 16MB.\nIf it exceeds 16MB, which quite commonly occurs for history files,\nlog files, and the like, it spits out an error.</p>\n<p>What happens next?</p>\n<p>User input gets ignored, services malfunction,\nservers crash (when even errors aren't properly handled), and BOOM!</p>\n<p>So how can we fix this....</p>\n<h2>The easier way (with caveats)</h2>\n<p>The lazy developer might say, why don't we just extend the maximum limit from,\nsay, 16MB to 64MB?</p>\n<p>And, it would <strong>work</strong>, thanks to the MongoDB devs who created GridFS.</p>\n<p>Happily ever after.</p>\n<h2>The harder way (that pays you back)</h2>\n<p>A more sophisticated developer would try to refactor the models.</p>\n<p>She would separate arrays, make an array element into a separate model,\nthose models would reference back the original document,\nby something like <code>'parent_id': 'some_random_ObjectId'</code>.</p>\n<p>That would allow the developer to query elements of that new model\nand retrieve only elements that have the <code>parent_id</code> to something.</p>\n<p>This achieves the same functionality with, well, not exceeding the limit.</p>\n<p>Since each element is stored in a separate document, it should still have plenty of capacity left.</p>\n<p>The drawback of this approach is, I guess, a subtle increase in time complexity (or MongoDB might optimize the call and make it even faster)?</p>\n<h1>To Be Continued...</h1>"
    },
    "_id": "posts/mongodb-tips-and-tricks.mdx",
    "_raw": {
      "sourceFilePath": "posts/mongodb-tips-and-tricks.mdx",
      "sourceFileName": "mongodb-tips-and-tricks.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/mongodb-tips-and-tricks"
    },
    "type": "Blog",
    "readingTime": {
      "text": "2 min read",
      "minutes": 1.4,
      "time": 84000,
      "words": 385
    },
    "wordCount": 387,
    "tweetIds": [],
    "slug": "mongodb-tips-and-tricks"
  },
  {
    "title": "Priority Queues, Heaps, and Binary Heaps.",
    "publishedAt": "2021-10-18",
    "summary": "What is a priority queue? How is it internally implemented? How should I use one?",
    "body": {
      "raw": "\n# Introduction\n\nAs you can see in the name, it's a queue, but it isn't a\n[FIFO](<https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)>) data structure. Moreover, it has priorities.\nWhich priorities? Well....\n\nHave you guessed it? You might think, \"Doesn't it use some kind of size comparison?\"\nYes. It uses size comparisons, but it's more extended. What? Extended? No, never mind.\nFor now, I'll just discuss what a priority queue is.\n\n# Definition\n\nTo begin with, a priority queue is a data structure that performs several operations such as peeking (or to say, getting) the top element\n(I'll explain what's the top element later), popping the top element, and pushing a new element into the priority queue.\n\nAll of these operations work at a time complexity of `O(log n)`.\n(The reference is [this](https://en.cppreference.com/w/cpp/container/priority_queue).)\nQuite fast, huh? Oh, and you might guess, \"Does it use a tree?\"\n\nYes. It uses a tree, but not any tree. It uses a binary heap to manage its elements.\n\n# Binary heap\n\n[What's a binary heap?](https://en.wikipedia.org/wiki/Binary_heap)\nFirst, a heap always has the extremest (e.g. smallest, largest) element at the root.\nIt keeps the order by swapping parent-child nodes when a change occurs.\nAnd a binary heap is a heap where every element (except for leaf nodes) has exactly two children.\nHow does it manage the order? Well, for this one, I'll just quote Wikipedia.\n(The image might look dark, so consider turning off dark mode if you are using it. Just my two cents.)\n\n> To add an element to a heap, we can perform this algorithm:\n> Add the element to the bottom level of the heap at the leftmost open space.\n> Compare the added element with its parent; if they are in the correct order, stop.\n> If not, swap the element with its parent and return to the previous step.\n> Steps 2 and 3, which restore the heap property by comparing and possibly swapping a node with its parent, are called the up-heap operation (also known as bubble-up, percolate-up, sift-up, trickle-up, swim-up, heapify-up, or cascade-up).\n> The number of operations required depends only on the number of levels the new element must rise to satisfy the heap property. Thus, the insertion operation has a worst-case time complexity of O(log n). For a random heap, and for repeated insertions, the insertion operation has an average-case complexity of O(1).\n> As an example of binary heap insertion, say we have a max-heap\n> ![](https://upload.wikimedia.org/wikipedia/commons/a/ac/Heap_add_step1.svg)\n> and we want to add the number 15 to the heap. We first place the 15 in the position marked by the X. However, the heap property is violated since 15 > 8, so we need to swap the 15 and the 8. So, we have the heap looking as follows after the first swap:\n> ![](https://upload.wikimedia.org/wikipedia/commons/1/16/Heap_add_step2.svg)\n> However the heap property is still violated since 15 > 11, so we need to swap again:\n> ![](https://upload.wikimedia.org/wikipedia/commons/5/51/Heap_add_step3.svg)\n> which is a valid max-heap. There is no need to check the left child after this final step: at the start, the max-heap was valid, meaning the root was already greater than its left child, so replacing the root with an even greater value will maintain the property that each node is greater than its children (11 > 5; if 15 > 11, and 11 > 5, then 15 > 5, because of the transitive relation).\n\nLong story short, it puts the new element at the bottom of the heap,\nand it keeps swapping it with its parent until it complies with the comparison function.\n\n---\n\nOkay... so now we know that a priority queue uses a binary heap and what a binary heap is, but anyway, what are these operations?\nAs I said, there are three operations. However, before we discuss these operations, let's first initialize a priority queue.\nHere comes the code, so don't panic. (For sake of brevity, I'll just use `int` as the element type.)\n\n# Operations of Priority Queues\n\n## Initialization\n\n### Largest element on top\n\n```cpp\n#include <priority_queue>\n\npriority_queue<int> pq;\n```\n\nEasy as cake, huh?\n\nNow, let's dive deeper into what this really means.\nFirst, `priority_queue` is a STL data structure. It accepts a template parameter, and we can put the type `int` there.\n\n### Smallest element on top\n\nHowever, this declaration yields a priority queue which gives the biggest element on top.\nIf you want the priority queue to give the smallest element on top,\nyou can write like this.\n\n```cpp\n#include <priority_queue>\n\npriority_queue<int, vector<int>, greater<int>> pq;\n```\n\nWhat I just did is, I manually added a container to the priority queue, which is usually redundant,\nbut because we need to set the third parameter to `greater<int>`, I added it.\nAnd most importantly, `greater<int>` reverses the comparison function, which makes the smallest element go on top.\n\n**However, for custom template types, `greater<T>` should be defined.**\n\n# Pushing elements\n\nNow that we discussed about how to declare the priority queue, let's talk about how to actually push an element to the priority queue.\n\nIt's actually simpler than declaring a priority queue. Just type this: `pq.push(SOME_NUMBER);` Here, `SOME_NUMBER` is any number. _Fin._\n\n# Peeking elements\n\nWe pushed an element, so what should we do next? Well, we should now peek what's on the top.\nThat's also simple, with just one line of code: `pq.top();`\nIt gives us the top element, to say, the _extreme_ element.\n\n# Popping elements\n\nPushed, peeked. Now we should pop it, to make it empty. How to do it? `pq.pop();` Easy.\n\n# Example\n\nNow, a full example of how to use a priority queue.\n\n```cpp:priority_queue.cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\npriority_queue<int> pq;\n\nint main() {\n    pq.push(3);                 // pq: [3]\n    pq.push(7);                 // pq: [7, 3]\n    pq.push(4);                 // pq: [7, 4, 3]\n    pq.push(5);                 // pq: [7, 5, 4, 3]\n    pq.push(-3);                // pq: [7, 5, 4, 3, -3]\n    cout << pq.top() << \"\\n\";   // Output: \"7\"\n    pq.pop();                   // pq: [5, 4, 3, -3]\n    cout << pq.top() << \"\\n\";   // Output: \"5\"\n    return 0;\n}\n```\n\n# Summary\n\nTo summarize, priority queues are used to get the _extreme element,_\nthey are internally implemented using binary heaps,\nand their main three functions are `pq.push(SOME_VALUE)`, `pq.top()`, and `pq.pop()`.\n\nI hope this summarizes well, and if you have anything to say, please leave the comments below.\nIt could be anything – appreciation, information, wisdom, or even humor.\n\nAnyway, have a great day.\n\nSee you next time, bye. 🍻\n",
      "html": "<h1>Introduction</h1>\n<p>As you can see in the name, it's a queue, but it isn't a\n<a href=\"https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)\">FIFO</a> data structure. Moreover, it has priorities.\nWhich priorities? Well....</p>\n<p>Have you guessed it? You might think, \"Doesn't it use some kind of size comparison?\"\nYes. It uses size comparisons, but it's more extended. What? Extended? No, never mind.\nFor now, I'll just discuss what a priority queue is.</p>\n<h1>Definition</h1>\n<p>To begin with, a priority queue is a data structure that performs several operations such as peeking (or to say, getting) the top element\n(I'll explain what's the top element later), popping the top element, and pushing a new element into the priority queue.</p>\n<p>All of these operations work at a time complexity of <code>O(log n)</code>.\n(The reference is <a href=\"https://en.cppreference.com/w/cpp/container/priority_queue\">this</a>.)\nQuite fast, huh? Oh, and you might guess, \"Does it use a tree?\"</p>\n<p>Yes. It uses a tree, but not any tree. It uses a binary heap to manage its elements.</p>\n<h1>Binary heap</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Binary_heap\">What's a binary heap?</a>\nFirst, a heap always has the extremest (e.g. smallest, largest) element at the root.\nIt keeps the order by swapping parent-child nodes when a change occurs.\nAnd a binary heap is a heap where every element (except for leaf nodes) has exactly two children.\nHow does it manage the order? Well, for this one, I'll just quote Wikipedia.\n(The image might look dark, so consider turning off dark mode if you are using it. Just my two cents.)</p>\n<blockquote>\n<p>To add an element to a heap, we can perform this algorithm:\nAdd the element to the bottom level of the heap at the leftmost open space.\nCompare the added element with its parent; if they are in the correct order, stop.\nIf not, swap the element with its parent and return to the previous step.\nSteps 2 and 3, which restore the heap property by comparing and possibly swapping a node with its parent, are called the up-heap operation (also known as bubble-up, percolate-up, sift-up, trickle-up, swim-up, heapify-up, or cascade-up).\nThe number of operations required depends only on the number of levels the new element must rise to satisfy the heap property. Thus, the insertion operation has a worst-case time complexity of O(log n). For a random heap, and for repeated insertions, the insertion operation has an average-case complexity of O(1).\nAs an example of binary heap insertion, say we have a max-heap\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/Heap_add_step1.svg\" alt=\"\">\nand we want to add the number 15 to the heap. We first place the 15 in the position marked by the X. However, the heap property is violated since 15 > 8, so we need to swap the 15 and the 8. So, we have the heap looking as follows after the first swap:\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/1/16/Heap_add_step2.svg\" alt=\"\">\nHowever the heap property is still violated since 15 > 11, so we need to swap again:\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/51/Heap_add_step3.svg\" alt=\"\">\nwhich is a valid max-heap. There is no need to check the left child after this final step: at the start, the max-heap was valid, meaning the root was already greater than its left child, so replacing the root with an even greater value will maintain the property that each node is greater than its children (11 > 5; if 15 > 11, and 11 > 5, then 15 > 5, because of the transitive relation).</p>\n</blockquote>\n<p>Long story short, it puts the new element at the bottom of the heap,\nand it keeps swapping it with its parent until it complies with the comparison function.</p>\n<hr>\n<p>Okay... so now we know that a priority queue uses a binary heap and what a binary heap is, but anyway, what are these operations?\nAs I said, there are three operations. However, before we discuss these operations, let's first initialize a priority queue.\nHere comes the code, so don't panic. (For sake of brevity, I'll just use <code>int</code> as the element type.)</p>\n<h1>Operations of Priority Queues</h1>\n<h2>Initialization</h2>\n<h3>Largest element on top</h3>\n<pre><code class=\"language-cpp\">#include &#x3C;priority_queue>\n\npriority_queue&#x3C;int> pq;\n</code></pre>\n<p>Easy as cake, huh?</p>\n<p>Now, let's dive deeper into what this really means.\nFirst, <code>priority_queue</code> is a STL data structure. It accepts a template parameter, and we can put the type <code>int</code> there.</p>\n<h3>Smallest element on top</h3>\n<p>However, this declaration yields a priority queue which gives the biggest element on top.\nIf you want the priority queue to give the smallest element on top,\nyou can write like this.</p>\n<pre><code class=\"language-cpp\">#include &#x3C;priority_queue>\n\npriority_queue&#x3C;int, vector&#x3C;int>, greater&#x3C;int>> pq;\n</code></pre>\n<p>What I just did is, I manually added a container to the priority queue, which is usually redundant,\nbut because we need to set the third parameter to <code>greater&#x3C;int></code>, I added it.\nAnd most importantly, <code>greater&#x3C;int></code> reverses the comparison function, which makes the smallest element go on top.</p>\n<p><strong>However, for custom template types, <code>greater&#x3C;T></code> should be defined.</strong></p>\n<h1>Pushing elements</h1>\n<p>Now that we discussed about how to declare the priority queue, let's talk about how to actually push an element to the priority queue.</p>\n<p>It's actually simpler than declaring a priority queue. Just type this: <code>pq.push(SOME_NUMBER);</code> Here, <code>SOME_NUMBER</code> is any number. <em>Fin.</em></p>\n<h1>Peeking elements</h1>\n<p>We pushed an element, so what should we do next? Well, we should now peek what's on the top.\nThat's also simple, with just one line of code: <code>pq.top();</code>\nIt gives us the top element, to say, the <em>extreme</em> element.</p>\n<h1>Popping elements</h1>\n<p>Pushed, peeked. Now we should pop it, to make it empty. How to do it? <code>pq.pop();</code> Easy.</p>\n<h1>Example</h1>\n<p>Now, a full example of how to use a priority queue.</p>\n<pre><code class=\"language-cpp:priority_queue.cpp\">#include &#x3C;bits/stdc++.h>\n\nusing namespace std;\n\npriority_queue&#x3C;int> pq;\n\nint main() {\n    pq.push(3);                 // pq: [3]\n    pq.push(7);                 // pq: [7, 3]\n    pq.push(4);                 // pq: [7, 4, 3]\n    pq.push(5);                 // pq: [7, 5, 4, 3]\n    pq.push(-3);                // pq: [7, 5, 4, 3, -3]\n    cout &#x3C;&#x3C; pq.top() &#x3C;&#x3C; \"\\n\";   // Output: \"7\"\n    pq.pop();                   // pq: [5, 4, 3, -3]\n    cout &#x3C;&#x3C; pq.top() &#x3C;&#x3C; \"\\n\";   // Output: \"5\"\n    return 0;\n}\n</code></pre>\n<h1>Summary</h1>\n<p>To summarize, priority queues are used to get the <em>extreme element,</em>\nthey are internally implemented using binary heaps,\nand their main three functions are <code>pq.push(SOME_VALUE)</code>, <code>pq.top()</code>, and <code>pq.pop()</code>.</p>\n<p>I hope this summarizes well, and if you have anything to say, please leave the comments below.\nIt could be anything – appreciation, information, wisdom, or even humor.</p>\n<p>Anyway, have a great day.</p>\n<p>See you next time, bye. 🍻</p>"
    },
    "_id": "posts/priority-queue.mdx",
    "_raw": {
      "sourceFilePath": "posts/priority-queue.mdx",
      "sourceFileName": "priority-queue.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/priority-queue"
    },
    "type": "Blog",
    "readingTime": {
      "text": "4 min read",
      "minutes": 3.8727272727272726,
      "time": 232364,
      "words": 1065
    },
    "wordCount": 1067,
    "tweetIds": [],
    "slug": "priority-queue"
  },
  {
    "title": "Ross Mathematics Program",
    "publishedAt": "2023-4-27",
    "summary": "Why Ross?",
    "body": {
      "raw": "\n1. Recommendation Letters (hmm)\n2. Essays (well, was fun at least)\n3. Problemset (created a quite hard problem and solved it, so prolly #3 carried me.)",
      "html": "<ol>\n<li>Recommendation Letters (hmm)</li>\n<li>Essays (well, was fun at least)</li>\n<li>Problemset (created a quite hard problem and solved it, so prolly #3 carried me.)</li>\n</ol>"
    },
    "_id": "posts/ross-mathematics-program.mdx",
    "_raw": {
      "sourceFilePath": "posts/ross-mathematics-program.mdx",
      "sourceFileName": "ross-mathematics-program.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/ross-mathematics-program"
    },
    "type": "Blog",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.09454545454545454,
      "time": 5673,
      "words": 26
    },
    "wordCount": 27,
    "tweetIds": [],
    "slug": "ross-mathematics-program"
  },
  {
    "title": "Stanford Online High School",
    "publishedAt": "2023-3-10",
    "summary": "I didn't believe 'till the last moment that I would get in!",
    "body": {
      "raw": "\n1. Recommendation Letters (hmm)\n2. Essays (well, was fun at least, but duh Stanford, lots of essays)\n3. Video essay (uh not bad?)",
      "html": "<ol>\n<li>Recommendation Letters (hmm)</li>\n<li>Essays (well, was fun at least, but duh Stanford, lots of essays)</li>\n<li>Video essay (uh not bad?)</li>\n</ol>"
    },
    "_id": "posts/stanford-ohs.mdx",
    "_raw": {
      "sourceFilePath": "posts/stanford-ohs.mdx",
      "sourceFileName": "stanford-ohs.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/stanford-ohs"
    },
    "type": "Blog",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.08363636363636363,
      "time": 5018,
      "words": 23
    },
    "wordCount": 24,
    "tweetIds": [],
    "slug": "stanford-ohs"
  },
  {
    "title": "The Ultimate Guide to Linux Desktop Customization",
    "publishedAt": "2022-02-22",
    "summary": "Which distro to use? What desktop environment? What kind of window manager? OS hardening?",
    "body": {
      "raw": "\n# Choosing Distros\n\nThere are an infinite number of distros that you can choose from, but you don't need to try all of 'em.\n\nA couple of famous distros are: Arch, Debian, Ubuntu, and RHEL.\nThere are also Arch-like, Debian-like, Ubuntu-like distros as well, and I'll firmly introduce them as well.\n\n## For Tinkerers\n\nIf you want to try tinkering with your own system, I suggest EndeavourOS.\n\nWhy EndeavourOS?\n\n- Arch-like distro. Highly customizable.\n- It directly uses Arch's main repo, which means you get the latest fixes and features.\n- You can install it via a graphical interface, which is quite cool.\n- The community is very helpful, and has lots of advanced users.\n- Free to choose between Xfce, Budgie, Cinnamon, Deepin, i3, KDE Plasma 5, LXQt, Mate, or GNOME.\n\nThere are other Arch-like distros as well.\nArtix, Arco, Manjaro, Garuda, and much more.\nTry them if you want to, but sticking with Endeavour won't be a bad experience.\n\n# Choosing a DE\n\nI personally don't use a DE. It's bloated. I rather use the i3 window manager, since it's fast and simple.",
      "html": "<h1>Choosing Distros</h1>\n<p>There are an infinite number of distros that you can choose from, but you don't need to try all of 'em.</p>\n<p>A couple of famous distros are: Arch, Debian, Ubuntu, and RHEL.\nThere are also Arch-like, Debian-like, Ubuntu-like distros as well, and I'll firmly introduce them as well.</p>\n<h2>For Tinkerers</h2>\n<p>If you want to try tinkering with your own system, I suggest EndeavourOS.</p>\n<p>Why EndeavourOS?</p>\n<ul>\n<li>Arch-like distro. Highly customizable.</li>\n<li>It directly uses Arch's main repo, which means you get the latest fixes and features.</li>\n<li>You can install it via a graphical interface, which is quite cool.</li>\n<li>The community is very helpful, and has lots of advanced users.</li>\n<li>Free to choose between Xfce, Budgie, Cinnamon, Deepin, i3, KDE Plasma 5, LXQt, Mate, or GNOME.</li>\n</ul>\n<p>There are other Arch-like distros as well.\nArtix, Arco, Manjaro, Garuda, and much more.\nTry them if you want to, but sticking with Endeavour won't be a bad experience.</p>\n<h1>Choosing a DE</h1>\n<p>I personally don't use a DE. It's bloated. I rather use the i3 window manager, since it's fast and simple.</p>"
    },
    "_id": "posts/the-ultimate-guide-to-linux-desktop-customizing.mdx",
    "_raw": {
      "sourceFilePath": "posts/the-ultimate-guide-to-linux-desktop-customizing.mdx",
      "sourceFileName": "the-ultimate-guide-to-linux-desktop-customizing.mdx",
      "sourceFileDir": "posts",
      "contentType": "mdx",
      "flattenedPath": "posts/the-ultimate-guide-to-linux-desktop-customizing"
    },
    "type": "Blog",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.6727272727272727,
      "time": 40364,
      "words": 185
    },
    "wordCount": 186,
    "tweetIds": [],
    "slug": "the-ultimate-guide-to-linux-desktop-customizing"
  }
]