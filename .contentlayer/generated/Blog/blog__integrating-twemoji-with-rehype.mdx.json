{
  "title": "How to Use Twemojis Within the Unified Ecosystem",
  "publishedAt": "2021-10-18",
  "summary": "We'll talk about what rehype-twemojify is, why it was made, and how to actually use it in a project.",
  "body": {
    "raw": "\n# Introduction\n\nHi! In this article, I'll talk about how to add twemojis to [rehype.js](https://github.com/rehypejs/rehype).\n\nSince emojis had first got into the web, they always took people's attention, as they were a totally new language.\nEveryone loves emojis, right? Me too. I personally consider myself an emoji enthusiast.\nI use emojis all the time, and undoubtfully, [Emojipedia](https://emojipedia.com) is my best friend.\n\nHowever, since emojis are system-dependent, some emojis that look pretty in your environment might just show nothing at all for other environments.\nHow to solve this problem? Well, we have custom emojis! Custom emojis are emojis that are displayed as images instead of ordinary plain text.\nBy using custom emojis, we, as developers, can equally provide a consistent user experience for everyone. Hooray!\nNevertheless, there are plentiful number of custom emojis to choose from.\nMicrosoft's Segoe UI Emoji is also good, but since it has a strict license, it's actually quite not... good.\nBut hey, [twemoji](https://twemoji.twitter.com/) to the rescue! It's totally free, open sourced, and more importantly, pretty!\nI'm using it on my website, too! âš¡âš¡\n\n...\n\nOkay, how do we apply Twemojis to rehype?\n\n# Installation\n\nFirst, let's talk about how to convert ordinary emojis to twemojis.\nPreviously, there were no plugins to convert ordinary emojis to twemojis, but don't be sad, I made one!\nYou can install the [rehype-twemojify](https://www.npmjs.com/package/rehype-twemojify) plugin with `yarn`, `npm`, `pnpm` or whatever package manager you prefer.\nI'll do it with yarn, (not yarn v2, but yarn classic) since yarn is fast and lightweight.\n\n```\nyarn add --dev rehype-twemojify // For yarn\n```\n\n```\nnpm i --save-dev rehype-twemojify // For NPM\n```\n\nNow that you've installed it, try adding it to your rehype plugin list.\nIf you don't have rehype yet, install it using this command:\n\n```\nyarn add --dev rehype // For Yarn\n```\n\n```\nnpm i --save-dev rehype // For NPM\n```\n\nAnd simply run this plugin as follows.\n\n# Configurations\n\n```ts\nimport rehype from 'rehype';\nimport rehypeTwemojify from 'rehype-twemojify';\n\nrehype().use(rehypeTwemojify);\n```\n\nOr, for [contentlayer](https://www.contentlayer.dev/), you could do this:\n\n```ts:contentlayer.config.ts\nimport rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [[rehypeTwemojify]]\n  }\n});\n\nexport default contentLayerConfig;\n```\n\nFor most people, this should be enough. But if you're an I-wanna-customize-more sort of person, this is for you.\n\n# Next.js Specific Config\n\nIf you're using Next.js, here's a custom configuration, which supports using `/_next/image`, instead of the default one.\n\nJust add `framework: 'next'`, and boom!\n\nIf you want to use your own twemoji files, add your custom base, which can be configured using `base: '/YOUR/BASE'`.\nBy default, if your files are located at `/public/static/images/twemoji`, you should write `/static/images/twemoji`.\n\nFurthermore, you can set your images' width and quality via the `w` and `q` parameters in the `params` object.\n`params.w` is the width, and you can read more about it [here](https://github.com/vercel/next.js/issues/18413).\n`params.q` is the quality of the image, and usually for emojis that use small images, `5` to `40` is okay.\nIt should be fine even if you set it to `1`.\n\nActually, you can add more parameters if you want. Internally, it works by appending those parameters to the image query url.\n\nYou can also exclude some characters you don't want to transform, such as the `Â©` character, by setting the `exclude` array.\n\nAnyway, this is the config for Next.js.\n\n```ts:contentlayer.config.ts\nimport rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypeTwemojify,\n        {\n          framework: 'next',\n          params: { w: 32, q: 20 },\n          base: '/static/images/twemoji',\n          exclude: ['Â©', 'Â®', 'â„¢', 'â„—']\n        }\n      ]\n    ]\n  }\n});\n\nexport default contentLayerConfig;\n```\n\n# Configurations\n\nIf you're curious what configurations you can do, here's the list.\n\n- `framework`: `'next' | 'aleph'`, optional. Choose the framework you want to use.\n- `params`: `{[key: string]: any}`, optional. Any params you want to put for the image url.\n- `folder`: `string`, optional. The folder that has emojis, e.g., `svg`, `72x72`.\n- `base`: `string`, optional. The base url, by default `https://twemoji.maxcdn.com/v/latest`\n- `ext`: `string`, optional. The image extension, by default `.png`\n- `size`: `string`, optional. The assets size, by default `72x72`\n- `exclude`: `Array<string>`, optional. Characters you want to exclude.\n\nThanks for reading, as always! Goodbye. ðŸ›¸\n",
    "html": "<h1>Introduction</h1>\n<p>Hi! In this article, I'll talk about how to add twemojis to <a href=\"https://github.com/rehypejs/rehype\">rehype.js</a>.</p>\n<p>Since emojis had first got into the web, they always took people's attention, as they were a totally new language.\nEveryone loves emojis, right? Me too. I personally consider myself an emoji enthusiast.\nI use emojis all the time, and undoubtfully, <a href=\"https://emojipedia.com\">Emojipedia</a> is my best friend.</p>\n<p>However, since emojis are system-dependent, some emojis that look pretty in your environment might just show nothing at all for other environments.\nHow to solve this problem? Well, we have custom emojis! Custom emojis are emojis that are displayed as images instead of ordinary plain text.\nBy using custom emojis, we, as developers, can equally provide a consistent user experience for everyone. Hooray!\nNevertheless, there are plentiful number of custom emojis to choose from.\nMicrosoft's Segoe UI Emoji is also good, but since it has a strict license, it's actually quite not... good.\nBut hey, <a href=\"https://twemoji.twitter.com/\">twemoji</a> to the rescue! It's totally free, open sourced, and more importantly, pretty!\nI'm using it on my website, too! âš¡âš¡</p>\n<p>...</p>\n<p>Okay, how do we apply Twemojis to rehype?</p>\n<h1>Installation</h1>\n<p>First, let's talk about how to convert ordinary emojis to twemojis.\nPreviously, there were no plugins to convert ordinary emojis to twemojis, but don't be sad, I made one!\nYou can install the <a href=\"https://www.npmjs.com/package/rehype-twemojify\">rehype-twemojify</a> plugin with <code>yarn</code>, <code>npm</code>, <code>pnpm</code> or whatever package manager you prefer.\nI'll do it with yarn, (not yarn v2, but yarn classic) since yarn is fast and lightweight.</p>\n<pre><code>yarn add --dev rehype-twemojify // For yarn\n</code></pre>\n<pre><code>npm i --save-dev rehype-twemojify // For NPM\n</code></pre>\n<p>Now that you've installed it, try adding it to your rehype plugin list.\nIf you don't have rehype yet, install it using this command:</p>\n<pre><code>yarn add --dev rehype // For Yarn\n</code></pre>\n<pre><code>npm i --save-dev rehype // For NPM\n</code></pre>\n<p>And simply run this plugin as follows.</p>\n<h1>Configurations</h1>\n<pre><code class=\"language-ts\">import rehype from 'rehype';\nimport rehypeTwemojify from 'rehype-twemojify';\n\nrehype().use(rehypeTwemojify);\n</code></pre>\n<p>Or, for <a href=\"https://www.contentlayer.dev/\">contentlayer</a>, you could do this:</p>\n<pre><code class=\"language-ts:contentlayer.config.ts\">import rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [[rehypeTwemojify]]\n  }\n});\n\nexport default contentLayerConfig;\n</code></pre>\n<p>For most people, this should be enough. But if you're an I-wanna-customize-more sort of person, this is for you.</p>\n<h1>Next.js Specific Config</h1>\n<p>If you're using Next.js, here's a custom configuration, which supports using <code>/_next/image</code>, instead of the default one.</p>\n<p>Just add <code>framework: 'next'</code>, and boom!</p>\n<p>If you want to use your own twemoji files, add your custom base, which can be configured using <code>base: '/YOUR/BASE'</code>.\nBy default, if your files are located at <code>/public/static/images/twemoji</code>, you should write <code>/static/images/twemoji</code>.</p>\n<p>Furthermore, you can set your images' width and quality via the <code>w</code> and <code>q</code> parameters in the <code>params</code> object.\n<code>params.w</code> is the width, and you can read more about it <a href=\"https://github.com/vercel/next.js/issues/18413\">here</a>.\n<code>params.q</code> is the quality of the image, and usually for emojis that use small images, <code>5</code> to <code>40</code> is okay.\nIt should be fine even if you set it to <code>1</code>.</p>\n<p>Actually, you can add more parameters if you want. Internally, it works by appending those parameters to the image query url.</p>\n<p>You can also exclude some characters you don't want to transform, such as the <code>Â©</code> character, by setting the <code>exclude</code> array.</p>\n<p>Anyway, this is the config for Next.js.</p>\n<pre><code class=\"language-ts:contentlayer.config.ts\">import rehypeTwemojify from 'rehype-twemojify';\n\nconst contentLayerConfig = makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypeTwemojify,\n        {\n          framework: 'next',\n          params: { w: 32, q: 20 },\n          base: '/static/images/twemoji',\n          exclude: ['Â©', 'Â®', 'â„¢', 'â„—']\n        }\n      ]\n    ]\n  }\n});\n\nexport default contentLayerConfig;\n</code></pre>\n<h1>Configurations</h1>\n<p>If you're curious what configurations you can do, here's the list.</p>\n<ul>\n<li><code>framework</code>: <code>'next' | 'aleph'</code>, optional. Choose the framework you want to use.</li>\n<li><code>params</code>: <code>{[key: string]: any}</code>, optional. Any params you want to put for the image url.</li>\n<li><code>folder</code>: <code>string</code>, optional. The folder that has emojis, e.g., <code>svg</code>, <code>72x72</code>.</li>\n<li><code>base</code>: <code>string</code>, optional. The base url, by default <code>https://twemoji.maxcdn.com/v/latest</code></li>\n<li><code>ext</code>: <code>string</code>, optional. The image extension, by default <code>.png</code></li>\n<li><code>size</code>: <code>string</code>, optional. The assets size, by default <code>72x72</code></li>\n<li><code>exclude</code>: <code>Array&#x3C;string></code>, optional. Characters you want to exclude.</li>\n</ul>\n<p>Thanks for reading, as always! Goodbye. ðŸ›¸</p>"
  },
  "_id": "blog/integrating-twemoji-with-rehype.mdx",
  "_raw": {
    "sourceFilePath": "blog/integrating-twemoji-with-rehype.mdx",
    "sourceFileName": "integrating-twemoji-with-rehype.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/integrating-twemoji-with-rehype"
  },
  "type": "Blog",
  "readingTime": {
    "text": "3 min read",
    "minutes": 2.498181818181818,
    "time": 149891,
    "words": 687
  },
  "wordCount": 689,
  "tweetIds": [],
  "slug": "integrating-twemoji-with-rehype"
}